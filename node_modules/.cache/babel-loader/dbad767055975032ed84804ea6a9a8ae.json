{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _class = require('dom-helpers/class');\nvar _class2 = _interopRequireDefault(_class);\nvar _style = require('dom-helpers/style');\nvar _style2 = _interopRequireDefault(_style);\nvar _scrollbarSize = require('dom-helpers/util/scrollbarSize');\nvar _scrollbarSize2 = _interopRequireDefault(_scrollbarSize);\nvar _isOverflowing = require('./utils/isOverflowing');\nvar _isOverflowing2 = _interopRequireDefault(_isOverflowing);\nvar _manageAriaHidden = require('./utils/manageAriaHidden');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction findIndexOf(arr, cb) {\n  var idx = -1;\n  arr.some(function (d, i) {\n    if (cb(d, i)) {\n      idx = i;\n      return true;\n    }\n  });\n  return idx;\n}\nfunction findContainer(data, modal) {\n  return findIndexOf(data, function (d) {\n    return d.modals.indexOf(modal) !== -1;\n  });\n}\nfunction setContainerStyle(state, container) {\n  var style = {\n    overflow: 'hidden'\n  };\n\n  // we are only interested in the actual `style` here\n  // becasue we will override it\n  state.style = {\n    overflow: container.style.overflow,\n    paddingRight: container.style.paddingRight\n  };\n  if (state.overflowing) {\n    // use computed style, here to get the real padding\n    // to add our scrollbar width\n    style.paddingRight = parseInt((0, _style2.default)(container, 'paddingRight') || 0, 10) + (0, _scrollbarSize2.default)() + 'px';\n  }\n  (0, _style2.default)(container, style);\n}\nfunction removeContainerStyle(_ref, container) {\n  var style = _ref.style;\n  Object.keys(style).forEach(function (key) {\n    return container.style[key] = style[key];\n  });\n}\n/**\n * Proper state managment for containers and the modals in those containers.\n *\n * @internal Used by the Modal to ensure proper styling of containers.\n */\n\nvar ModalManager = function ModalManager() {\n  var _this = this;\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref2$hideSiblingNode = _ref2.hideSiblingNodes,\n    hideSiblingNodes = _ref2$hideSiblingNode === undefined ? true : _ref2$hideSiblingNode,\n    _ref2$handleContainer = _ref2.handleContainerOverflow,\n    handleContainerOverflow = _ref2$handleContainer === undefined ? true : _ref2$handleContainer;\n  _classCallCheck(this, ModalManager);\n  this.add = function (modal, container, className) {\n    var modalIdx = _this.modals.indexOf(modal);\n    var containerIdx = _this.containers.indexOf(container);\n    if (modalIdx !== -1) {\n      return modalIdx;\n    }\n    modalIdx = _this.modals.length;\n    _this.modals.push(modal);\n    if (_this.hideSiblingNodes) {\n      (0, _manageAriaHidden.hideSiblings)(container, modal.mountNode);\n    }\n    if (containerIdx !== -1) {\n      _this.data[containerIdx].modals.push(modal);\n      return modalIdx;\n    }\n    var data = {\n      modals: [modal],\n      //right now only the first modal of a container will have its classes applied\n      classes: className ? className.split(/\\s+/) : [],\n      overflowing: (0, _isOverflowing2.default)(container)\n    };\n    if (_this.handleContainerOverflow) {\n      setContainerStyle(data, container);\n    }\n    data.classes.forEach(_class2.default.addClass.bind(null, container));\n    _this.containers.push(container);\n    _this.data.push(data);\n    return modalIdx;\n  };\n  this.remove = function (modal) {\n    var modalIdx = _this.modals.indexOf(modal);\n    if (modalIdx === -1) {\n      return;\n    }\n    var containerIdx = findContainer(_this.data, modal);\n    var data = _this.data[containerIdx];\n    var container = _this.containers[containerIdx];\n    data.modals.splice(data.modals.indexOf(modal), 1);\n    _this.modals.splice(modalIdx, 1);\n\n    // if that was the last modal in a container,\n    // clean up the container\n    if (data.modals.length === 0) {\n      data.classes.forEach(_class2.default.removeClass.bind(null, container));\n      if (_this.handleContainerOverflow) {\n        removeContainerStyle(data, container);\n      }\n      if (_this.hideSiblingNodes) {\n        (0, _manageAriaHidden.showSiblings)(container, modal.mountNode);\n      }\n      _this.containers.splice(containerIdx, 1);\n      _this.data.splice(containerIdx, 1);\n    } else if (_this.hideSiblingNodes) {\n      //otherwise make sure the next top modal is visible to a SR\n      (0, _manageAriaHidden.ariaHidden)(false, data.modals[data.modals.length - 1].mountNode);\n    }\n  };\n  this.isTopModal = function (modal) {\n    return !!_this.modals.length && _this.modals[_this.modals.length - 1] === modal;\n  };\n  this.hideSiblingNodes = hideSiblingNodes;\n  this.handleContainerOverflow = handleContainerOverflow;\n  this.modals = [];\n  this.containers = [];\n  this.data = [];\n};\nexports.default = ModalManager;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}