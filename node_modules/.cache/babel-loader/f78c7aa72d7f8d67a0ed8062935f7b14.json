{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime-corejs2/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime-corejs2/helpers/esm/inheritsLoose\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport elementType from 'prop-types-extra/lib/elementType';\nimport { bsClass as setBsClass, prefix, splitBsPropsAndOmit } from './utils/bootstrapUtils';\nvar propTypes = {\n  componentClass: elementType,\n  /**\n   * Sets a default animation strategy for all children `<TabPane>`s. Use\n   * `false` to disable, `true` to enable the default `<Fade>` animation or\n   * a react-transition-group v2 `<Transition/>` component.\n   */\n  animation: PropTypes.oneOfType([PropTypes.bool, elementType]),\n  /**\n   * Wait until the first \"enter\" transition to mount tabs (add them to the DOM)\n   */\n  mountOnEnter: PropTypes.bool,\n  /**\n   * Unmount tabs (remove it from the DOM) when they are no longer visible\n   */\n  unmountOnExit: PropTypes.bool\n};\nvar defaultProps = {\n  componentClass: 'div',\n  animation: true,\n  mountOnEnter: false,\n  unmountOnExit: false\n};\nvar contextTypes = {\n  $bs_tabContainer: PropTypes.shape({\n    activeKey: PropTypes.any\n  })\n};\nvar childContextTypes = {\n  $bs_tabContent: PropTypes.shape({\n    bsClass: PropTypes.string,\n    animation: PropTypes.oneOfType([PropTypes.bool, elementType]),\n    activeKey: PropTypes.any,\n    mountOnEnter: PropTypes.bool,\n    unmountOnExit: PropTypes.bool,\n    onPaneEnter: PropTypes.func.isRequired,\n    onPaneExited: PropTypes.func.isRequired,\n    exiting: PropTypes.bool.isRequired\n  })\n};\nvar TabContent = /*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(TabContent, _React$Component);\n  function TabContent(props, context) {\n    var _this;\n    _this = _React$Component.call(this, props, context) || this;\n    _this.handlePaneEnter = _this.handlePaneEnter.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handlePaneExited = _this.handlePaneExited.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Active entries in state will be `null` unless `animation` is set. Need\n    // to track active child in case keys swap and the active child changes\n    // but the active key does not.\n\n    _this.state = {\n      activeKey: null,\n      activeChild: null\n    };\n    return _this;\n  }\n  var _proto = TabContent.prototype;\n  _proto.getChildContext = function getChildContext() {\n    var _this$props = this.props,\n      bsClass = _this$props.bsClass,\n      animation = _this$props.animation,\n      mountOnEnter = _this$props.mountOnEnter,\n      unmountOnExit = _this$props.unmountOnExit;\n    var stateActiveKey = this.state.activeKey;\n    var containerActiveKey = this.getContainerActiveKey();\n    var activeKey = stateActiveKey != null ? stateActiveKey : containerActiveKey;\n    var exiting = stateActiveKey != null && stateActiveKey !== containerActiveKey;\n    return {\n      $bs_tabContent: {\n        bsClass: bsClass,\n        animation: animation,\n        activeKey: activeKey,\n        mountOnEnter: mountOnEnter,\n        unmountOnExit: unmountOnExit,\n        onPaneEnter: this.handlePaneEnter,\n        onPaneExited: this.handlePaneExited,\n        exiting: exiting\n      }\n    };\n  };\n  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (!nextProps.animation && this.state.activeChild) {\n      this.setState({\n        activeKey: null,\n        activeChild: null\n      });\n    }\n  };\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.isUnmounted = true;\n  };\n  _proto.getContainerActiveKey = function getContainerActiveKey() {\n    var tabContainer = this.context.$bs_tabContainer;\n    return tabContainer && tabContainer.activeKey;\n  };\n  _proto.handlePaneEnter = function handlePaneEnter(child, childKey) {\n    if (!this.props.animation) {\n      return false;\n    } // It's possible that this child should be transitioning out.\n\n    if (childKey !== this.getContainerActiveKey()) {\n      return false;\n    }\n    this.setState({\n      activeKey: childKey,\n      activeChild: child\n    });\n    return true;\n  };\n  _proto.handlePaneExited = function handlePaneExited(child) {\n    // This might happen as everything is unmounting.\n    if (this.isUnmounted) {\n      return;\n    }\n    this.setState(function (_ref) {\n      var activeChild = _ref.activeChild;\n      if (activeChild !== child) {\n        return null;\n      }\n      return {\n        activeKey: null,\n        activeChild: null\n      };\n    });\n  };\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n      Component = _this$props2.componentClass,\n      className = _this$props2.className,\n      props = _objectWithoutPropertiesLoose(_this$props2, [\"componentClass\", \"className\"]);\n    var _splitBsPropsAndOmit = splitBsPropsAndOmit(props, ['animation', 'mountOnEnter', 'unmountOnExit']),\n      bsProps = _splitBsPropsAndOmit[0],\n      elementProps = _splitBsPropsAndOmit[1];\n    return React.createElement(Component, _extends({}, elementProps, {\n      className: classNames(className, prefix(bsProps, 'content'))\n    }));\n  };\n  return TabContent;\n}(React.Component);\nTabContent.propTypes = propTypes;\nTabContent.defaultProps = defaultProps;\nTabContent.contextTypes = contextTypes;\nTabContent.childContextTypes = childContextTypes;\nexport default setBsClass('tab', TabContent);","map":null,"metadata":{},"sourceType":"module"}